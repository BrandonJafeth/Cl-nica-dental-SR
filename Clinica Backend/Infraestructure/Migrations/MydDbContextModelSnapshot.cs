// <auto-generated />
using System;
using Clinica_Dental;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(MydDbContext))]
    partial class MydDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Clinica_Dental.Auditoria", b =>
                {
                    b.Property<Guid>("ID_Auditoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DispositivoQueRealizo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Fecha_Hora_Accion")
                        .HasColumnType("datetime");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.HasKey("ID_Auditoria")
                        .HasName("PK__Auditori__2C0A46DBE6581F43");

                    b.ToTable("Auditoria");
                });

            modelBuilder.Entity("Clinica_Dental.Cita", b =>
                {
                    b.Property<string>("ID_Cita")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Fecha_Cita")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("Hora_Fin")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("Hora_Inicio")
                        .HasColumnType("time");

                    b.Property<string>("ID_Dentista")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_EstadoCita")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Funcionario")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Paciente")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Motivo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ID_Cita")
                        .HasName("PK__Cita__7C17FD160E32939C");

                    b.HasIndex("ID_Dentista");

                    b.HasIndex("ID_EstadoCita");

                    b.HasIndex("ID_Funcionario");

                    b.HasIndex("ID_Paciente");

                    b.ToTable("Cita", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionCita");

                            t.HasTrigger("tr_AuditarEliminacionCita");

                            t.HasTrigger("tr_AuditarInsercionCita");

                            t.HasTrigger("tr_EvitarDuplicadosCita");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Cuenta", b =>
                {
                    b.Property<string>("ID_Cuenta")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Fecha_Apertura")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Fecha_Cierre")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Fecha_Ultima_Actualizacion")
                        .HasColumnType("date");

                    b.Property<string>("ID_Estado_Cuenta")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Factura")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Paciente")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Observaciones")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Saldo_Total")
                        .HasColumnType("money");

                    b.HasKey("ID_Cuenta")
                        .HasName("PK__Cuenta__820D611FD52E8A69");

                    b.HasIndex("ID_Estado_Cuenta");

                    b.HasIndex("ID_Factura");

                    b.HasIndex("ID_Paciente");

                    b.ToTable("Cuenta", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionCuenta");

                            t.HasTrigger("tr_AuditarEliminacionCuenta");

                            t.HasTrigger("tr_AuditarInsercionCuenta");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Dentista", b =>
                {
                    b.Property<string>("ID_Dentista")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Apellido1_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Correo_Den")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Direccion_Den")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("FechaNacimiento_Den")
                        .HasColumnType("date");

                    b.Property<string>("ID_Funcionario")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Telefono_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Dentista")
                        .HasName("PK__Dentista__99A0225AB60F7A5C");

                    b.HasIndex("ID_Funcionario");

                    b.ToTable("Dentista", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionDentista");

                            t.HasTrigger("tr_AuditarEliminacionDentista");

                            t.HasTrigger("tr_AuditarInsercionDentista");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Dentista_Especialidad", b =>
                {
                    b.Property<string>("ID_Dentista_Especialidad")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Dentista")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Especialidad")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_Dentista_Especialidad")
                        .HasName("PK__Dentista__5A0D823E1000AB2E");

                    b.HasIndex("ID_Dentista");

                    b.HasIndex("ID_Especialidad");

                    b.ToTable("Dentista_Especialidad", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionDentistaEspecialidad");

                            t.HasTrigger("tr_AuditarEliminacionDentistaEspecialidad");

                            t.HasTrigger("tr_AuditarInsercionDentistaEspecialidad");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Especialidad", b =>
                {
                    b.Property<string>("ID_Especialidad")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_Esp")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_Esp")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Especialidad")
                        .HasName("PK__Especial__5D7732D7854F8876");

                    b.ToTable("Especialidad", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionEspecialidad");

                            t.HasTrigger("tr_AuditarEliminacionEspecialidad");

                            t.HasTrigger("tr_AuditarInsercionEspecialidad");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Cita", b =>
                {
                    b.Property<string>("ID_EstadoCita")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_Estado")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_Estado")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_EstadoCita")
                        .HasName("PK__Estado_C__82FA13D96A36A238");

                    b.ToTable("Estado_Citas", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionEstadoCitas");

                            t.HasTrigger("tr_AuditarEliminacionEstadoCitas");

                            t.HasTrigger("tr_AuditarInsercionEstadoCitas");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Cuenta", b =>
                {
                    b.Property<string>("ID_Estado_Cuenta")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_EC")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_EC")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Estado_Cuenta")
                        .HasName("PK__Estado_C__127A61A58239AFAF");

                    b.ToTable("Estado_Cuenta");
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Pago", b =>
                {
                    b.Property<string>("ID_EstadoPago")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_EP")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_EP")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_EstadoPago")
                        .HasName("PK__Estado_P__3ECA89D5AC5C9CC3");

                    b.ToTable("Estado_Pago", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionEstadoPago");

                            t.HasTrigger("tr_AuditarEliminacionEstadoPago");

                            t.HasTrigger("tr_AuditarInsercionEstadoPago");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Tratamiento", b =>
                {
                    b.Property<string>("ID_EstadoTratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_Estado")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_Estado")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_EstadoTratamiento")
                        .HasName("PK__Estado_T__4372CBE5EE9BDA01");

                    b.ToTable("Estado_Tratamiento", (string)null);
                });

            modelBuilder.Entity("Clinica_Dental.Factura", b =>
                {
                    b.Property<string>("ID_Factura")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<DateOnly?>("FechaEmision_Fa")
                        .HasColumnType("date");

                    b.Property<string>("ID_EstadoPago")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<decimal?>("MontoTotal_Fa")
                        .HasColumnType("money");

                    b.HasKey("ID_Factura")
                        .HasName("PK__Factura__E9D586A865003965");

                    b.HasIndex("ID_EstadoPago");

                    b.ToTable("Factura", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionFactura");

                            t.HasTrigger("tr_AuditarEliminacionFactura");

                            t.HasTrigger("tr_AuditarInsercionFactura");

                            t.HasTrigger("tr_EvitarFacturaConMontoCero");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Factura_Procedimiento", b =>
                {
                    b.Property<string>("ID_Factura_Procedimiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Factura")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Procedimiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_Factura_Procedimiento")
                        .HasName("PK__Factura___3F2E92FB0601FDE3");

                    b.HasIndex("ID_Factura");

                    b.HasIndex("ID_Procedimiento");

                    b.ToTable("Factura_Procedimiento", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionFacturaProcedimiento");

                            t.HasTrigger("tr_AuditarEliminacionFacturaProcedimiento");

                            t.HasTrigger("tr_AuditarInsercionFacturaProcedimiento");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Factura_Tratamiento", b =>
                {
                    b.Property<string>("ID_Factura_Tratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Factura")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Tratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_Factura_Tratamiento")
                        .HasName("PK__Factura___800ACAE12CEA5D81");

                    b.HasIndex("ID_Factura");

                    b.HasIndex("ID_Tratamiento");

                    b.ToTable("Factura_Tratamiento", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionFacturaTratamiento");

                            t.HasTrigger("tr_AuditarEliminacionFacturaTratamiento");

                            t.HasTrigger("tr_AuditarInsercionFacturaTratamiento");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Funcionario", b =>
                {
                    b.Property<string>("ID_Funcionario")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Apellido1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Contraseña")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Funcionario")
                        .HasName("PK__Funciona__0AE977B95F5546F8");

                    b.ToTable("Funcionario", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionFuncionario");

                            t.HasTrigger("tr_AuditarEliminacionFuncionario");

                            t.HasTrigger("tr_AuditarInsercionFuncionario");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Historial_Medico", b =>
                {
                    b.Property<string>("ID_HistorialMedico")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Diagnostico")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("Fecha_Historial")
                        .HasColumnType("date");

                    b.Property<string>("ID_Paciente")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_HistorialMedico")
                        .HasName("PK__Historia__C9A115780EFAF8C4");

                    b.HasIndex(new[] { "ID_Paciente" }, "UQ__Historia__5F3650604ECC0C4C")
                        .IsUnique()
                        .HasFilter("[ID_Paciente] IS NOT NULL");

                    b.ToTable("Historial_Medico", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionHistorialMedico");

                            t.HasTrigger("tr_AuditarEliminacionHistorialMedico");

                            t.HasTrigger("tr_AuditarInsercionHistorialMedico");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Historial_Tratamiento", b =>
                {
                    b.Property<string>("ID_Historial_Tratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<DateOnly?>("Fecha_Tratamiento")
                        .HasColumnType("date");

                    b.Property<string>("ID_HistorialMedico")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Tratamiento")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_Historial_Tratamiento")
                        .HasName("PK__Historia__2611FDA2CC7604E3");

                    b.HasIndex("ID_HistorialMedico");

                    b.HasIndex("ID_Tratamiento");

                    b.ToTable("Historial_Tratamiento", (string)null);
                });

            modelBuilder.Entity("Clinica_Dental.Paciente", b =>
                {
                    b.Property<string>("ID_Paciente")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Correo_Pac")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Direccion_Pac")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("Fecha_Nacimiento_Pac")
                        .HasColumnType("date");

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Telefono_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Paciente")
                        .HasName("PK__Paciente__5F365061CEFD25E1");

                    b.ToTable("Paciente", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionPaciente");

                            t.HasTrigger("tr_AuditarEliminacionPaciente");

                            t.HasTrigger("tr_AuditarInsercionPaciente");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Pago", b =>
                {
                    b.Property<Guid>("ID_Pago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly?>("Fecha_Pago")
                        .HasColumnType("date");

                    b.Property<string>("ID_Factura")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Tipo_Pago")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<decimal?>("Monto_Pago")
                        .HasColumnType("money");

                    b.HasKey("ID_Pago")
                        .HasName("PK__Pago__AE88B4290CBA209A");

                    b.HasIndex("ID_Factura");

                    b.HasIndex("ID_Tipo_Pago");

                    b.ToTable("Pago", null, t =>
                        {
                            t.HasTrigger("tr_ActualizarEstadoFactura");

                            t.HasTrigger("tr_AuditarInsercionPago");

                            t.HasTrigger("tr_EvitarPagosNegativos");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Permiso", b =>
                {
                    b.Property<string>("ID_Permisos")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Permisos")
                        .HasName("PK__Permisos__4AC6BD0AEA998186");

                    b.ToTable("Permisos", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionPermisos");

                            t.HasTrigger("tr_AuditarEliminacionPermisos");

                            t.HasTrigger("tr_AuditarInsercionPermisos");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Procedimiento", b =>
                {
                    b.Property<string>("ID_Procedimiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Detalles_Proc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("Fecha_Proc")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("Hora_Fin_Proc")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("Hora_Inicio_Proc")
                        .HasColumnType("time");

                    b.Property<string>("ID_Paciente")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Tratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_Procedimiento")
                        .HasName("PK__Procedim__5A929191BCC5DF04");

                    b.HasIndex("ID_Paciente");

                    b.HasIndex("ID_Tratamiento");

                    b.ToTable("Procedimiento", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionProcedimiento");

                            t.HasTrigger("tr_AuditarEliminacionProcedimiento");

                            t.HasTrigger("tr_AuditarInsercionProcedimiento");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Role", b =>
                {
                    b.Property<string>("ID_Roles")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Roles")
                        .HasName("PK__Roles__30F629932BE7D4D5");

                    b.ToTable("Roles", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionRoles");

                            t.HasTrigger("tr_AuditarEliminacionRoles");

                            t.HasTrigger("tr_AuditarInsercionRoles");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Roles_Permiso", b =>
                {
                    b.Property<string>("ID_Roles_Permisos")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Permisos")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Roles")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_Roles_Permisos")
                        .HasName("PK__Roles_Pe__84F39C2974AD3C8E");

                    b.HasIndex("ID_Permisos");

                    b.HasIndex("ID_Roles");

                    b.ToTable("Roles_Permisos");
                });

            modelBuilder.Entity("Clinica_Dental.Tipo_Pago", b =>
                {
                    b.Property<string>("ID_Tipo_Pago")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_TP")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_TP")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Tipo_Pago")
                        .HasName("PK__Tipo_Pag__4792A1BED7A94554");

                    b.ToTable("Tipo_Pago", (string)null);
                });

            modelBuilder.Entity("Clinica_Dental.Tipo_Tratamiento", b =>
                {
                    b.Property<string>("ID_TipoTratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_Tipo_Tratamiento")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_Tipo_Tratamiento")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_TipoTratamiento")
                        .HasName("PK__Tipo_Tra__7616399282F3BAEF");

                    b.ToTable("Tipo_Tratamiento", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionTipoTratamiento");

                            t.HasTrigger("tr_AuditarEliminacionTipoTratamiento");

                            t.HasTrigger("tr_AuditarInsercionTipoTratamiento");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Tratamiento", b =>
                {
                    b.Property<string>("ID_Tratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Descripcion_Tra")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ID_EstadoTratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_TipoTratamiento")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre_Tra")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID_Tratamiento")
                        .HasName("PK__Tratamie__37F4ED1580BD18FB");

                    b.HasIndex("ID_EstadoTratamiento");

                    b.HasIndex("ID_TipoTratamiento");

                    b.ToTable("Tratamiento", null, t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionTratamiento");

                            t.HasTrigger("tr_AuditarEliminacionTratamiento");

                            t.HasTrigger("tr_AuditarInsercionTratamiento");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Usuario", b =>
                {
                    b.Property<string>("ID_Usuario")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Apellido1")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Apellido2")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Contraseña")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("char(12)")
                        .IsFixedLength();

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ID_Funcionario")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID_Usuario")
                        .HasName("PK__Usuarios__DE4431C503015969");

                    b.HasIndex("ID_Funcionario");

                    b.ToTable("Usuarios", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionUsuarios");

                            t.HasTrigger("tr_AuditarEliminacionUsuarios");

                            t.HasTrigger("tr_AuditarInsercionUsuarios");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Clinica_Dental.Usuario_Role", b =>
                {
                    b.Property<string>("ID_Usuario_Roles")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Roles")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Usuario")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.HasKey("ID_Usuario_Roles")
                        .HasName("PK__Usuario___24287850EAA6203E");

                    b.HasIndex("ID_Roles");

                    b.HasIndex("ID_Usuario");

                    b.ToTable("Usuario_Roles", t =>
                        {
                            t.HasTrigger("tr_AuditarActualizacionUsuarioRoles");

                            t.HasTrigger("tr_AuditarEliminacionUsuarioRoles");

                            t.HasTrigger("tr_AuditarInsercionUsuarioRoles");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_CitasPorEstado", b =>
                {
                    b.Property<string>("Apellido1_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly?>("Fecha_Cita")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("Hora_Fin")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("Hora_Inicio")
                        .HasColumnType("time");

                    b.Property<string>("ID_Cita")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Motivo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Estado")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_CitasPorEstado", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_DentistasConMasTratamiento", b =>
                {
                    b.Property<string>("Apellido1_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ID_Dentista")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TotalTratamientos")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_DentistasConMasTratamientos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_FacturacionPorFecha", b =>
                {
                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Estado_Pago")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly?>("FechaEmision_Fa")
                        .HasColumnType("date");

                    b.Property<string>("ID_Factura")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<decimal?>("MontoTotal_Fa")
                        .HasColumnType("money");

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_FacturacionPorFecha", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_FacturasPendiente", b =>
                {
                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Estado_Pago")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly?>("FechaEmision_Fa")
                        .HasColumnType("date");

                    b.Property<string>("ID_Factura")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<decimal?>("MontoTotal_Fa")
                        .HasColumnType("money");

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_FacturasPendientes", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_HistorialPaciente", b =>
                {
                    b.Property<string>("Apellido1_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Correo_Pac")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Descripcion_Tra")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Direccion_Pac")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("Fecha_Cita")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Fecha_Nacimiento_Pac")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("Fecha_Tratamiento")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("Hora_Fin")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("Hora_Inicio")
                        .HasColumnType("time");

                    b.Property<string>("ID_Cita")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Historial_Tratamiento")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Paciente")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Motivo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Tra")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Telefono_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_HistorialPaciente", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_PacientesConTratamientosActivo", b =>
                {
                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descripcion_Tra")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("Fecha_Tratamiento")
                        .HasColumnType("date");

                    b.Property<string>("ID_Paciente")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Tra")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_PacientesConTratamientosActivos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_ProximasCita", b =>
                {
                    b.Property<string>("Apellido1_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly?>("Fecha_Cita")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("Hora_Fin")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("Hora_Inicio")
                        .HasColumnType("time");

                    b.Property<string>("ID_Cita")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Motivo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_ProximasCitas", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_ResumenFinancieroPaciente", b =>
                {
                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ID_Paciente")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("SaldoPendiente")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalFacturado")
                        .HasColumnType("money");

                    b.Property<decimal?>("TotalPagado")
                        .HasColumnType("money");

                    b.ToTable((string)null);

                    b.ToView("vw_ResumenFinancieroPaciente", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_TratamientosPorDentista", b =>
                {
                    b.Property<string>("Apellido1_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Descripcion_Tra")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("Fecha_Tratamiento")
                        .HasColumnType("date");

                    b.Property<string>("ID_Dentista")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ID_Historial_Tratamiento")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre_Den")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Nombre_Tra")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.ToTable((string)null);

                    b.ToView("vw_TratamientosPorDentista", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Views.vw_TratamientosPorPaciente", b =>
                {
                    b.Property<string>("Apellido1_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Apellido2_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ID_Paciente")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("Nombre_Pac")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("TotalTratamientos")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vw_TratamientosPorPaciente", (string)null);
                });

            modelBuilder.Entity("Clinica_Dental.Cita", b =>
                {
                    b.HasOne("Clinica_Dental.Dentista", "ID_DentistaNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("ID_Dentista")
                        .HasConstraintName("FK__Cita__ID_Dentist__6B24EA82");

                    b.HasOne("Clinica_Dental.Estado_Cita", "ID_EstadoCitaNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("ID_EstadoCita")
                        .HasConstraintName("FK__Cita__ID_EstadoC__6D0D32F4");

                    b.HasOne("Clinica_Dental.Funcionario", "ID_FuncionarioNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("ID_Funcionario")
                        .HasConstraintName("FK__Cita__ID_Funcion__6C190EBB");

                    b.HasOne("Clinica_Dental.Paciente", "ID_PacienteNavigation")
                        .WithMany("Cita")
                        .HasForeignKey("ID_Paciente")
                        .HasConstraintName("FK__Cita__ID_Pacient__6A30C649");

                    b.Navigation("ID_DentistaNavigation");

                    b.Navigation("ID_EstadoCitaNavigation");

                    b.Navigation("ID_FuncionarioNavigation");

                    b.Navigation("ID_PacienteNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Cuenta", b =>
                {
                    b.HasOne("Clinica_Dental.Estado_Cuenta", "ID_Estado_CuentaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("ID_Estado_Cuenta")
                        .HasConstraintName("FK__Cuenta__ID_Estad__619B8048");

                    b.HasOne("Clinica_Dental.Factura", "ID_FacturaNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("ID_Factura")
                        .HasConstraintName("FK__Cuenta__ID_Factu__628FA481");

                    b.HasOne("Clinica_Dental.Paciente", "ID_PacienteNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("ID_Paciente")
                        .HasConstraintName("FK__Cuenta__ID_Pacie__6383C8BA");

                    b.Navigation("ID_Estado_CuentaNavigation");

                    b.Navigation("ID_FacturaNavigation");

                    b.Navigation("ID_PacienteNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Dentista", b =>
                {
                    b.HasOne("Clinica_Dental.Funcionario", "ID_FuncionarioNavigation")
                        .WithMany("Dentista")
                        .HasForeignKey("ID_Funcionario")
                        .HasConstraintName("FK__Dentista__ID_Fun__4BAC3F29");

                    b.Navigation("ID_FuncionarioNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Dentista_Especialidad", b =>
                {
                    b.HasOne("Clinica_Dental.Dentista", "ID_DentistaNavigation")
                        .WithMany("Dentista_Especialidads")
                        .HasForeignKey("ID_Dentista")
                        .HasConstraintName("FK__Dentista___ID_De__5070F446");

                    b.HasOne("Clinica_Dental.Especialidad", "ID_EspecialidadNavigation")
                        .WithMany("Dentista_Especialidads")
                        .HasForeignKey("ID_Especialidad")
                        .HasConstraintName("FK__Dentista___ID_Es__5165187F");

                    b.Navigation("ID_DentistaNavigation");

                    b.Navigation("ID_EspecialidadNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Factura", b =>
                {
                    b.HasOne("Clinica_Dental.Estado_Pago", "ID_EstadoPagoNavigation")
                        .WithMany("Facturas")
                        .HasForeignKey("ID_EstadoPago")
                        .HasConstraintName("FK__Factura__ID_Esta__59FA5E80");

                    b.Navigation("ID_EstadoPagoNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Factura_Procedimiento", b =>
                {
                    b.HasOne("Clinica_Dental.Factura", "ID_FacturaNavigation")
                        .WithMany("Factura_Procedimientos")
                        .HasForeignKey("ID_Factura")
                        .HasConstraintName("FK__Factura_P__ID_Fa__7F2BE32F");

                    b.HasOne("Clinica_Dental.Procedimiento", "ID_ProcedimientoNavigation")
                        .WithMany("Factura_Procedimientos")
                        .HasForeignKey("ID_Procedimiento")
                        .HasConstraintName("FK__Factura_P__ID_Pr__00200768");

                    b.Navigation("ID_FacturaNavigation");

                    b.Navigation("ID_ProcedimientoNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Factura_Tratamiento", b =>
                {
                    b.HasOne("Clinica_Dental.Factura", "ID_FacturaNavigation")
                        .WithMany("Factura_Tratamientos")
                        .HasForeignKey("ID_Factura")
                        .HasConstraintName("FK__Factura_T__ID_Fa__02FC7413");

                    b.HasOne("Clinica_Dental.Tratamiento", "ID_TratamientoNavigation")
                        .WithMany("Factura_Tratamientos")
                        .HasForeignKey("ID_Tratamiento")
                        .HasConstraintName("FK__Factura_T__ID_Tr__03F0984C");

                    b.Navigation("ID_FacturaNavigation");

                    b.Navigation("ID_TratamientoNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Historial_Medico", b =>
                {
                    b.HasOne("Clinica_Dental.Paciente", "ID_PacienteNavigation")
                        .WithOne("Historial_Medico")
                        .HasForeignKey("Clinica_Dental.Historial_Medico", "ID_Paciente")
                        .HasConstraintName("FK_HistorialMedico_Paciente");

                    b.Navigation("ID_PacienteNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Historial_Tratamiento", b =>
                {
                    b.HasOne("Clinica_Dental.Historial_Medico", "ID_HistorialMedicoNavigation")
                        .WithMany("Historial_Tratamientos")
                        .HasForeignKey("ID_HistorialMedico")
                        .IsRequired()
                        .HasConstraintName("FK__Historial__ID_Hi__6FE99F9F");

                    b.HasOne("Clinica_Dental.Tratamiento", "ID_TratamientoNavigation")
                        .WithMany("Historial_Tratamientos")
                        .HasForeignKey("ID_Tratamiento")
                        .IsRequired()
                        .HasConstraintName("FK__Historial__ID_Tr__70DDC3D8");

                    b.Navigation("ID_HistorialMedicoNavigation");

                    b.Navigation("ID_TratamientoNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Pago", b =>
                {
                    b.HasOne("Clinica_Dental.Factura", "ID_FacturaNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("ID_Factura")
                        .HasConstraintName("FK__Pago__ID_Factura__5DCAEF64");

                    b.HasOne("Clinica_Dental.Tipo_Pago", "ID_Tipo_PagoNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("ID_Tipo_Pago")
                        .HasConstraintName("FK__Pago__ID_Tipo_Pa__5EBF139D");

                    b.Navigation("ID_FacturaNavigation");

                    b.Navigation("ID_Tipo_PagoNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Procedimiento", b =>
                {
                    b.HasOne("Clinica_Dental.Paciente", "ID_PacienteNavigation")
                        .WithMany("Procedimientos")
                        .HasForeignKey("ID_Paciente")
                        .HasConstraintName("FK__Procedimi__ID_Pa__6754599E");

                    b.HasOne("Clinica_Dental.Tratamiento", "ID_TratamientoNavigation")
                        .WithMany("Procedimientos")
                        .HasForeignKey("ID_Tratamiento")
                        .HasConstraintName("FK__Procedimi__ID_Tr__66603565");

                    b.Navigation("ID_PacienteNavigation");

                    b.Navigation("ID_TratamientoNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Roles_Permiso", b =>
                {
                    b.HasOne("Clinica_Dental.Permiso", "ID_PermisosNavigation")
                        .WithMany("Roles_Permisos")
                        .HasForeignKey("ID_Permisos")
                        .HasConstraintName("FK__Roles_Per__ID_Pe__787EE5A0");

                    b.HasOne("Clinica_Dental.Role", "ID_RolesNavigation")
                        .WithMany("Roles_Permisos")
                        .HasForeignKey("ID_Roles")
                        .HasConstraintName("FK__Roles_Per__ID_Ro__778AC167");

                    b.Navigation("ID_PermisosNavigation");

                    b.Navigation("ID_RolesNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Tratamiento", b =>
                {
                    b.HasOne("Clinica_Dental.Estado_Tratamiento", "ID_EstadoTratamientoNavigation")
                        .WithMany("Tratamientos")
                        .HasForeignKey("ID_EstadoTratamiento")
                        .HasConstraintName("FK__Tratamien__ID_Es__440B1D61");

                    b.HasOne("Clinica_Dental.Tipo_Tratamiento", "ID_TipoTratamientoNavigation")
                        .WithMany("Tratamientos")
                        .HasForeignKey("ID_TipoTratamiento")
                        .HasConstraintName("FK__Tratamien__ID_Ti__4316F928");

                    b.Navigation("ID_EstadoTratamientoNavigation");

                    b.Navigation("ID_TipoTratamientoNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Usuario", b =>
                {
                    b.HasOne("Clinica_Dental.Funcionario", "ID_FuncionarioNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("ID_Funcionario")
                        .HasConstraintName("FK__Usuarios__ID_Fun__48CFD27E");

                    b.Navigation("ID_FuncionarioNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Usuario_Role", b =>
                {
                    b.HasOne("Clinica_Dental.Role", "ID_RolesNavigation")
                        .WithMany("Usuario_Roles")
                        .HasForeignKey("ID_Roles")
                        .HasConstraintName("FK__Usuario_R__ID_Ro__7C4F7684");

                    b.HasOne("Clinica_Dental.Usuario", "ID_UsuarioNavigation")
                        .WithMany("Usuario_Roles")
                        .HasForeignKey("ID_Usuario")
                        .HasConstraintName("FK__Usuario_R__ID_Us__7B5B524B");

                    b.Navigation("ID_RolesNavigation");

                    b.Navigation("ID_UsuarioNavigation");
                });

            modelBuilder.Entity("Clinica_Dental.Dentista", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Dentista_Especialidads");
                });

            modelBuilder.Entity("Clinica_Dental.Especialidad", b =>
                {
                    b.Navigation("Dentista_Especialidads");
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Cita", b =>
                {
                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Cuenta", b =>
                {
                    b.Navigation("Cuenta");
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Pago", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Clinica_Dental.Estado_Tratamiento", b =>
                {
                    b.Navigation("Tratamientos");
                });

            modelBuilder.Entity("Clinica_Dental.Factura", b =>
                {
                    b.Navigation("Cuenta");

                    b.Navigation("Factura_Procedimientos");

                    b.Navigation("Factura_Tratamientos");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Clinica_Dental.Funcionario", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Dentista");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Clinica_Dental.Historial_Medico", b =>
                {
                    b.Navigation("Historial_Tratamientos");
                });

            modelBuilder.Entity("Clinica_Dental.Paciente", b =>
                {
                    b.Navigation("Cita");

                    b.Navigation("Cuenta");

                    b.Navigation("Historial_Medico");

                    b.Navigation("Procedimientos");
                });

            modelBuilder.Entity("Clinica_Dental.Permiso", b =>
                {
                    b.Navigation("Roles_Permisos");
                });

            modelBuilder.Entity("Clinica_Dental.Procedimiento", b =>
                {
                    b.Navigation("Factura_Procedimientos");
                });

            modelBuilder.Entity("Clinica_Dental.Role", b =>
                {
                    b.Navigation("Roles_Permisos");

                    b.Navigation("Usuario_Roles");
                });

            modelBuilder.Entity("Clinica_Dental.Tipo_Pago", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Clinica_Dental.Tipo_Tratamiento", b =>
                {
                    b.Navigation("Tratamientos");
                });

            modelBuilder.Entity("Clinica_Dental.Tratamiento", b =>
                {
                    b.Navigation("Factura_Tratamientos");

                    b.Navigation("Historial_Tratamientos");

                    b.Navigation("Procedimientos");
                });

            modelBuilder.Entity("Clinica_Dental.Usuario", b =>
                {
                    b.Navigation("Usuario_Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
